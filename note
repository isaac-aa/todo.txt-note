#!/bin/bash

TODO_NOTES_DIR=${TODO_NOTES_DIR:-$TODO_DIR/notes}
TODO_NOTE_TAG=${TODO_NOTE_TAG:-note}
TODO_NOTE_TEMPLATE=${TODO_NOTE_TEMPLATE:-XXX}
TODO_NOTE_EXT=${TODO_NOTE_EXT:-.txt}
TODO_NOTE_ARCHIVE="$TODO_NOTES_DIR/archive$TODO_NOTE_EXT"
datebin=${TODO_TEST_REAL_DATE:-date}

usage() {
    echo "    $(basename $0) add|a ITEM#"
    echo "      Adds a note to the task on line ITEM#."
    echo "    $(basename $0) edit|e ITEM#|archive|a"
    echo "      Opens in EDITOR the note related with the task on line ITEM# or the notes archive."
    echo "    $(basename $0) show|s ITEM#|archive|a"
    echo "      Shows the note related with the task on line ITEM# or the notes archive."
}

getnotenamefromnumber() {
    # Parameters:
    #    $1: task number
    # Preconditions:
    #   $errmsg contains usage message.
    # Postcondition:
    #     $notename contains note name, if task has note.
    #     $item contains the task name

    item="$1"

    getTodo "$item"
    getnotenamefromtext "$todo"
}

getnotenamefromtext() {
    # Parameters: $1: task text
    # Preconditions: none
    # Postcondition:
    #     $notename contains note name, if task has note.

    notename=$(echo "$1" | grep -o " ${TODO_NOTE_TAG}:[^ .]*" | sed "s/^.*${TODO_NOTE_TAG}://")
    if [ $notename ]
    then
        notename=$notename${TODO_NOTE_EXT}
    fi
}

editnote() {
    # Parameter:: $1: Path of the file to edit
    # Preconditions: none
    # Postcondition: none
    if [ "$EDITOR" ]
    then
        $EDITOR "$1"
    else
        echo The EDITOR environment variable is not set.
    fi

}

getnotefilepath () {
    # Parameter:: $1: Task number or reference to file
    # Preconditions:
    # Postcondition: $notefilepath contains the path of the file to edit or show

    item="$1"

    if [[ "$item" ]] && [[ archive =~ ^${item}.*$ ]]
    then
        notefilepath="$TODO_NOTE_ARCHIVE"
    else
        getnotenamefromnumber $1

        if [ $notename ]
        then
            notefilepath="$TODO_NOTES_DIR/${notename}"
        else
            die "TODO: Task $item has no note."
        fi
    fi
}

getsearchresult () {
    # Parameter:: $1: note file to be processed
    # Parameter:: $2: search string. It can be either a task tag, date, context or project
    # Preconditions:
    # Postcondition: $searchresult contains the matching note fragments, empty is nothing is found
    if [[ "$2" =~ ^@  || "$2" =~ ^\+ ]]; then
        # Searches based on +projects or @contexts
        searchresult=$(awk "/^#.*${TODO_NOTE_TAG}:/{flag=0}/^#.*${2/\+/\\+}/{flag=1}flag" "$1" | _format )
    elif [[ "$2" =~ ^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}$ ]]; then
        # Searches based on dates
        searchresult=$(awk "/^#.*/{flag=0}/^#.*${2}/{flag=1}flag" "$1" | _format )
    else
        # Or just based on the tag
        searchresult=$(awk "/^#.*${TODO_NOTE_TAG}:/{flag=0}/^#.*${TODO_NOTE_TAG}:${2}\>/{flag=1}flag" "$1" | _format )
    fi
}

_format () {
    # Takes the stdin and format it.
    # This is taken from the _format function of todo.sh, so that the
    # color and style is the same and can be customized using the same
    # variables.
    # However, it was augmented to always print the task names using
    # COLOR_DONE
    awk '''
            function highlight(colorVar,      color) {
                color = ENVIRON[colorVar]
                gsub(/\\+033/, "\033", color)
                return color
            }
            {
                clr = ""
                if (match($0, /^[0-9]+ x /)) {
                    clr = highlight("COLOR_DONE")
                } else if (match($0, /^[0-9]+ \([A-Z]\) /)) {
                    clr = highlight("PRI_" substr($0, RSTART + RLENGTH - 3, 1))
                    clr = (clr ? clr : highlight("PRI_X"))
                    if (ENVIRON["HIDE_PRIORITY_SUBSTITUTION"] != "") {
                        $0 = substr($0, 1, RLENGTH - 4) substr($0, RSTART + RLENGTH)
                    }
                }
                head_beg = highlight("COLOR_DONE")
                head_end = (head_beg ? (highlight("DEFAULT") clr) : "")

                prj_beg = highlight("COLOR_PROJECT")
                prj_end = (prj_beg ? (highlight("DEFAULT") clr) : "")

                ctx_beg = highlight("COLOR_CONTEXT")
                ctx_end = (ctx_beg ? (highlight("DEFAULT") clr) : "")

                dat_beg = highlight("COLOR_DATE")
                dat_end = (dat_beg ? (highlight("DEFAULT") clr) : "")

                num_beg = highlight("COLOR_NUMBER")
                num_end = (num_beg ? (highlight("DEFAULT") clr) : "")

                met_beg = highlight("COLOR_META")
                met_end = (met_beg ? (highlight("DEFAULT") clr) : "")

                gsub(/[ \t][ \t]*/, "\n&\n")
                len = split($0, words, /\n/)

                printf "%s", clr
                for (i = 1; i <= len; ++i) {
                    if (i == 1 && words[i] ~ /^[0-9]+$/ ) {
                        printf "%s", num_beg words[i] num_end
                    } else if (words[i] ~ /^[+].*[A-Za-z0-9_]$/) {
                        printf "%s", prj_beg words[i] prj_end
                    } else if (words[i] ~ /^[@].*[A-Za-z0-9_]$/) {
                        printf "%s", ctx_beg words[i] ctx_end
                    } else if (words[i] ~ /^(19|20)[0-9][0-9]-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/) {
                        printf "%s", dat_beg words[i] dat_end
                    } else if (words[i] ~ /^[A-Za-z0-9]+:[^ ]+$/) {
                        printf "%s", met_beg words[i] met_end
                    } else {
                        if (words[1] ~ /^#/) {
                            printf "%s", head_beg words[i] head_end
                        } else {
                            printf "%s", words[i]
                        }
                    }
                }
                printf "\n"
            }
      '''
}

if [ "$1" = "usage" ]
then
    usage
    exit 0
fi

shift
TODO_NOTE_ACTION=$1
shift

case "$TODO_NOTE_ACTION" in
"add" | "a")
    errmsg="usage: $TODO_SH $(basename $0) $TODO_NOTE_ACTION ITEM#"
    getnotenamefromnumber $1

    [ $notename ] && die "TODO: Task $item already has a note."

    # Create notes directory if doesn't exist
    [ -d "$TODO_NOTES_DIR" ]  || mkdir -p "$TODO_NOTES_DIR" 2> /dev/null || die "Error: $TODO_NOTES_DIR is not a directory"


    # Create file
    filename=$(mktemp "$TODO_NOTES_DIR/${TODO_NOTE_TEMPLATE}")
    notetag=$(basename "$filename")
    notename="$notetag${TODO_NOTE_EXT}"
    # Remove the completition mark and date, and priority
    title=$(echo "$todo" | sed -e "s/^\(x ....-..-.. \)\?//" -e "s/^(.) \?//")
    # If not present, add the current date to the title
    if [[ ! $title =~ ....-..-.. ]]; then
        today=$($datebin +%Y-%m-%d)
    fi
    echo \# $today $title ${TODO_NOTE_TAG}:$notetag > "$TODO_NOTES_DIR/${notename}"
    # remove temp file created
    rm -f "${filename}"

    # Append note tag to task
    sed -i.bak $item" s/$/ ${TODO_NOTE_TAG}:$notetag/" "$TODO_FILE"

    getTodo "$item"
    echo $item $todo
    echo TODO: Note added to task $item.

    echo "Edit note?  (y/n)"
    read ANSWER
    if [ "$ANSWER" = "y" ]
    then
        editnote "$TODO_NOTES_DIR/${notename}"
    fi
    ;;

"edit" | "e")
    errmsg="usage: $TODO_SH $(basename $0) edit|e ITEM#|archive|a"
    getnotefilepath $*
    # NB: if using the testing environment 'date' does no longer
    # point to the system default
    lastmod=$($datebin --debug --reference="$notefilepath" +%Y-%m-%d)
    today=$($datebin +%Y-%m-%d)
    if [[ $lastmod != $today ]]; then
        echo "Note has not been edited today, add 'date' header? (y/n)"
        read ANSWER
        if [ "$ANSWER" = "y" ]
        then
            echo -e "\n# $today\n\n" >> "$notefilepath"
        fi
    fi
    editnote "$notefilepath"
    ;;

"show" | "s")
    errmsg="usage: $TODO_SH $(basename $0) show|s ITEM#|(archive|a [TAG|@context|+project|yyyy-mm-dd])"
    if [[ $1 =~ (^archive$)|(^a$) ]]; then
        # Print/search the archive of finished tasks
        getnotefilepath $1
        if [[ -z $2 ]]; then
            # Print the whole archive
            cat "$notefilepath" | _format
        else
            # or search it
            getsearchresult "$notefilepath" $2
            if [[ -z "$searchresult" ]]; then
                echo "There is no note with '${2}' in the archive"
            else
                echo "$searchresult"
            fi
        fi
    elif [[ -z $1 ]]; then
        die $errmsg
    elif [[ "$1" =~ ^[0-9]+$ ]]; then
        # Print the note associated with a task number
        getnotefilepath $1
        cat "$notefilepath" | _format
    else
        # Do the search on all the notes, including those tasks that are
        # not yet completed
        find "$TODO_NOTES_DIR" -iname "*${TODO_NOTE_EXT}" | ( while read note
        do
            getsearchresult "$note" $1
            if [[ ! -z "$searchresult" ]]; then
                echo "$searchresult"
                found=1
            fi
        done
        if [[ ! $found = 1 ]]; then
            echo "There is no note with '${1}' "
        fi )
    fi
    ;;

"__archive")
    getnotenamefromtext "$*"

    if [ $notename ]
    then
        cat "$TODO_NOTES_DIR/${notename}" >> "$TODO_NOTE_ARCHIVE"
        rm -f "$TODO_NOTES_DIR/${notename}"
    fi
    ;;

"__rmfromtext")
    getnotenamefromtext "$*"
    rm -f "$TODO_NOTES_DIR/$notename"
    ;;

*)
    usage
    ;;

esac
